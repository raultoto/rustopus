name: Merge Queue Maintenance

on:
  pull_request:
    types: [closed]
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write

jobs:
  maintain-merge-queue:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Get merged branch name
        id: merged-branch
        run: |
          MERGED_BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "MERGED_BRANCH=${MERGED_BRANCH}" >> $GITHUB_ENV

      - name: Save branches from merge-queue-to-dev
        id: save-branches
        run: |
          # Get all branches merged into merge-queue-to-dev except the one that was just merged to develop
          MERGED_BRANCHES=$(git branch -r --merged origin/merge-queue-to-dev | grep -v "merge-queue-to-dev" | grep -v "${{ env.MERGED_BRANCH }}" | sed 's/origin\///')
          echo "MERGED_BRANCHES<<EOF" >> $GITHUB_ENV
          echo "$MERGED_BRANCHES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Delete and recreate merge-queue-to-dev
        run: |
          git push origin --delete merge-queue-to-dev || true
          git checkout develop
          git pull origin develop
          git checkout -b merge-queue-to-dev
          git push origin merge-queue-to-dev

      - name: Merge saved branches
        id: merge_step
        continue-on-error: true
        run: |
          git checkout merge-queue-to-dev
          merged_branches=""
          while IFS= read -r branch; do
            if [ ! -z "$branch" ]; then
              branch=$(echo "$branch" | xargs)  # Trim whitespace
              echo "Merging $branch into merge-queue-to-dev"
              if git fetch origin $branch && git merge --no-ff origin/$branch -m "chore: re-merging $branch into merge-queue-to-dev"; then
                merged_branches="$merged_branches\n- $branch"
              else
                echo "::set-output name=merge_failed::true"
                echo "::set-output name=failed_branch::$branch"
                exit 1
              fi
            fi
          done <<< "${{ env.MERGED_BRANCHES }}"
          echo "::set-output name=merged_branches::$merged_branches"
          if [ $? -eq 0 ]; then
            git push origin merge-queue-to-dev
          fi

      - name: Send Discord notification on merge conflict
        if: steps.merge_step.outcome == 'failure'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            :x: **Merge Conflict Alert**
            > :warning: Conflict detected while merging branch
            > `${{ steps.merge_step.outputs.failed_branch }}` into `merge-queue-to-dev`
            
            Please resolve the conflicts manually.

      - name: Send Discord notification on successful merge
        if: steps.merge_step.outcome == 'success'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            :white_check_mark: **Successful Merge to merge-queue-to-dev**
            > :rocket: The following branches were merged successfully:
            ${{ steps.merge_step.outputs.merged_branches }} 